
Проверить действующие ветки 
git branch

Создать еще одну ветку
git branch Git2(название ветки)

Перейти на соседнюю ветку 
git checkout Git2

Создать фаил изаписать туда что нибудь 
cat > person.txt
"First_name : Yaroslav
Last_name : Kovalev
Age : 26"

Добавляем файл в промежуточную область 
git add .

Создаем комит
git commit -m "person"

Переходим в main ветку
git checkout main 

Сливаем ветки 
git merge Git2

Делаем изменение в файле
vim person.txt
"Device_1 : iPhone 6s
Device_2 : Xiaomi redmi note 10 pro"

Добавляем файл в промежуточную область 
git add .

Создаем комит
git commit -m "person_device"

Переходим во вторую ветку 
git checkout Git2

Делаем изменение в файле 
vim person.txt
"Device_3 : iPhone 11"

обавляем файл в промежуточную область 
git add .

Создаем комит
git commit -m "person_device_3"

Переходим в main ветку
git checkout main 

Сливаем ветки 
git merge Git2
(Появляется конфликт)

Открываем файл и решаем конфликт 
vim person.txt
"First_name : Yaroslav
Last_name : Kovalev
Age : 26
<<<<<<< HEAD
Device_1 : iPhone 6s
Device_2 : Xiaomi redmi note 10 pro
=======
>>>>>>> Git2
Device_3 : iPhone 11
"
Исправляем на 
"First_name : Yaroslav
Last_name : Kovalev
Age : 26
Device_1 : iPhone 6s
Device_2 : Xiaomi redmi note 10 pro
Device_3 : iPhone 11
"

Добавляем файл в промежуточную область,cоздаем комит
git commit -am "person_device_all"

Переходим во вторую ветку 
git checkout Git2

Выгружаем вторую ветку во внешний репозиторий 
git push -u origin Git2

Во внешнем репозитории добавляем с ветки Git2 изменения в ветку Main,добавляем изменения в файле person.txt

В терминале возвращаемся на главную ветку и смотрим информацию по изменениям 
git checkout main
git fetch

изменения с внешнего сервера 
git pull

(если автоматически изменения не сработали)
Тогда открываем файл и меняем вручную 
vim person.txt 
Добавляем файл в промежуточную область 
git add .
Создаем комит
git commit -m "add merge"




111


